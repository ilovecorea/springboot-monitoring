version: "3.8"

networks:
  monitoring:
    driver: bridge

volumes:
  prometheus_data: {}
  elasticsearch:

services:

  postgresql:
    image: postgres:13.4
    container_name: postgres
    environment:
      - POSTGRES_USER=blog
      - POSTGRES_PASSWORD=
      - TZ=Asia/Seoul
      - POSTGRES_HOST_AUTH_METHOD=trust
    ports:
      - "5432:5432"
    networks:
      - monitoring

  consul-server:
    image: hashicorp/consul:1.10.3
    container_name: consul-server
    restart: always
    volumes:
      - ./consul/server.json:/consul/config/server.json:ro
    networks:
      - monitoring
    ports:
      - "8500:8500"
      - "8600:8600/tcp"
      - "8600:8600/udp"
    command: "consul agent -dev -ui -client 0.0.0.0 -log-level=INFO"

  spring-hello:
    build:
      context: spring-hello
      dockerfile: Dockerfile
    container_name: spring-hello
    image: ilovecorea/spring-hello:${TAG:-latest}
    restart: always
    deploy:
      resources:
        limits:
          memory: 1g
    environment:
      - SPRING_PROFILES_ACTIVE=consul,logstash
      - MANAGEMENT_METRICS_EXPORT_PROMETHEUS_ENABLED=true
      - SPRING_CLOUD_CONSUL_HOST=consul-server
      - SPRING_CLOUD_CONSUL_PORT=8500
      - JAVA_OPTS=-Xmx512m -Xms512m
    ports:
      - "8080:8080"
    networks:
      - monitoring
    depends_on:
      - consul-server
      - logstash

  spring-blog:
    build:
      context: spring-blog
      dockerfile: Dockerfile
    container_name: spring-blog
    image: ilovecorea/spring-blog:${TAG:-latest}
    restart: always
    deploy:
      resources:
        limits:
          memory: 1g
    environment:
      - SPRING_PROFILES_ACTIVE=consul
      - MANAGEMENT_METRICS_EXPORT_PROMETHEUS_ENABLED=true
      - SPRING_CLOUD_CONSUL_HOST=consul-server
      - SPRING_CLOUD_CONSUL_PORT=8500
      - JAVA_OPTS=-Xmx512m -Xms512m
    ports:
      - "8081:8080"
    networks:
      - monitoring
    depends_on:
      - consul-server
      - logstash

  node-exporter:
    image: prom/node-exporter:v1.2.2
    container_name: node-exporter
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - "9100:9100"
    networks:
      - monitoring

  prometheus:
    image: prom/prometheus:v2.30.3
    container_name: prometheus
    restart: always
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - monitoring
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    depends_on:
      - consul-server

  grafana:
    image: grafana/grafana:7.5.3
    container_name: grafana
    restart: always
    volumes:
      - ./grafana/grafana.ini:/etc/grafana/grafana.ini
      - ./grafana/provisioning/:/etc/grafana/provisioning
      - ./grafana/dashboards/:/var/lib/grafana/dashboards
    networks:
      - monitoring
    ports:
      - "3000:3000"
    depends_on:
      - prometheus

  elasticsearch:
    build:
      context: elasticsearch
      args:
        ELK_VERSION: $ELK_VERSION
    restart: always
    deploy:
      resources:
        limits:
          memory: 4g
    volumes:
      - type: bind
        source: ./elasticsearch/config/elasticsearch.yml
        target: /usr/share/elasticsearch/config/elasticsearch.yml
        read_only: true
      - type: volume
        source: elasticsearch
        target: /usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      ES_JAVA_OPTS: "-Xmx2g -Xms2g"
#      ELASTIC_PASSWORD: changeme
      discovery.type: "single-node"
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    networks:
      - monitoring

  logstash:
    build:
      context: logstash
      args:
        ELK_VERSION: $ELK_VERSION
    deploy:
      resources:
        limits:
          memory: 2g
    restart: always
    volumes:
      - type: bind
        source: ./logstash/config/logstash.yml
        target: /usr/share/logstash/config/logstash.yml
        read_only: true
      - type: bind
        source: ./logstash/pipeline
        target: /usr/share/logstash/pipeline
        read_only: true
    ports:
      - "5000:5000"
      - "9600:9600"
    expose:
      - "5044"
    environment:
      LS_JAVA_OPTS: "-Xmx1g -Xms1g"
    networks:
      - monitoring
    depends_on:
      - elasticsearch

  kibana:
    build:
      context: kibana
      args:
        ELK_VERSION: $ELK_VERSION
    deploy:
      resources:
        limits:
          memory: 1g
    volumes:
      - type: bind
        source: ./kibana/config/kibana.yml
        target: /usr/share/kibana/config/kibana.yml
        read_only: true
    ports:
      - "5601:5601"
    networks:
      - monitoring
    depends_on:
      - elasticsearch
